from passlib.context import CryptContext
from jose import JWTError, jwt
from datetime import datetime, timedelta, timezone
from typing import Optional 
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
import os
from dotenv import load_dotenv
# 游녢 Importaciones necesarias para authenticate_user
from sqlalchemy.orm import Session
import crud # Necesitamos crud para buscar al usuario
import models # Necesitamos models para el tipado

load_dotenv() 

# --- CONFIGURACI칍N DE SEGURIDAD ---

SECRET_KEY = os.getenv("SECRET_KEY", "una-clave-secreta-muy-larga-y-dificil-de-adivinar")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30 

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# 游녢 CORRECCI칍N: Apunta a /token, la ruta definida en auth.py
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token") 


# --- FUNCIONES DE UTILIDAD ---

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verifica si una contrase침a en texto plano coincide con una hasheada."""
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    """Genera el hash de una contrase침a."""
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
    """Crea un nuevo token de acceso JWT."""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# --- 游녢 NUEVA FUNCI칍N: L칩gica de Autenticaci칩n ---
def authenticate_user(db: Session, username: str, password: str) -> Optional[models.User]:
    """
    Busca un usuario por username y verifica su contrase침a.
    Devuelve el objeto User si es v치lido, None si no.
    """
    user = crud.get_user_by_username(db, username=username)
    if not user:
        return None # Usuario no encontrado
    if not verify_password(password, user.hashed_password):
        return None # Contrase침a incorrecta
    return user # Usuario y contrase침a v치lidos